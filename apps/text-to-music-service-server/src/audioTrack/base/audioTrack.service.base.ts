/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AudioTrack as PrismaAudioTrack } from "@prisma/client";

export class AudioTrackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AudioTrackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.audioTrack.count(args);
  }

  async audioTracks(
    args: Prisma.AudioTrackFindManyArgs
  ): Promise<PrismaAudioTrack[]> {
    return this.prisma.audioTrack.findMany(args);
  }
  async audioTrack(
    args: Prisma.AudioTrackFindUniqueArgs
  ): Promise<PrismaAudioTrack | null> {
    return this.prisma.audioTrack.findUnique(args);
  }
  async createAudioTrack(
    args: Prisma.AudioTrackCreateArgs
  ): Promise<PrismaAudioTrack> {
    return this.prisma.audioTrack.create(args);
  }
  async updateAudioTrack(
    args: Prisma.AudioTrackUpdateArgs
  ): Promise<PrismaAudioTrack> {
    return this.prisma.audioTrack.update(args);
  }
  async deleteAudioTrack(
    args: Prisma.AudioTrackDeleteArgs
  ): Promise<PrismaAudioTrack> {
    return this.prisma.audioTrack.delete(args);
  }
}
