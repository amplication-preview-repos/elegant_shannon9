/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GenerationHistoryService } from "../generationHistory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GenerationHistoryCreateInput } from "./GenerationHistoryCreateInput";
import { GenerationHistory } from "./GenerationHistory";
import { GenerationHistoryFindManyArgs } from "./GenerationHistoryFindManyArgs";
import { GenerationHistoryWhereUniqueInput } from "./GenerationHistoryWhereUniqueInput";
import { GenerationHistoryUpdateInput } from "./GenerationHistoryUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GenerationHistoryControllerBase {
  constructor(
    protected readonly service: GenerationHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GenerationHistory })
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createGenerationHistory(
    @common.Body() data: GenerationHistoryCreateInput
  ): Promise<GenerationHistory> {
    return await this.service.createGenerationHistory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        parameters: true,
        prompt: true,
        resultAudioPath: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [GenerationHistory] })
  @ApiNestedQuery(GenerationHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async generationHistories(
    @common.Req() request: Request
  ): Promise<GenerationHistory[]> {
    const args = plainToClass(GenerationHistoryFindManyArgs, request.query);
    return this.service.generationHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        parameters: true,
        prompt: true,
        resultAudioPath: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GenerationHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async generationHistory(
    @common.Param() params: GenerationHistoryWhereUniqueInput
  ): Promise<GenerationHistory | null> {
    const result = await this.service.generationHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        parameters: true,
        prompt: true,
        resultAudioPath: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GenerationHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateGenerationHistory(
    @common.Param() params: GenerationHistoryWhereUniqueInput,
    @common.Body() data: GenerationHistoryUpdateInput
  ): Promise<GenerationHistory | null> {
    try {
      return await this.service.updateGenerationHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          parameters: true,
          prompt: true,
          resultAudioPath: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GenerationHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGenerationHistory(
    @common.Param() params: GenerationHistoryWhereUniqueInput
  ): Promise<GenerationHistory | null> {
    try {
      return await this.service.deleteGenerationHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          parameters: true,
          prompt: true,
          resultAudioPath: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
