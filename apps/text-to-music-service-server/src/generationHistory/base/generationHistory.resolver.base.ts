/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GenerationHistory } from "./GenerationHistory";
import { GenerationHistoryCountArgs } from "./GenerationHistoryCountArgs";
import { GenerationHistoryFindManyArgs } from "./GenerationHistoryFindManyArgs";
import { GenerationHistoryFindUniqueArgs } from "./GenerationHistoryFindUniqueArgs";
import { CreateGenerationHistoryArgs } from "./CreateGenerationHistoryArgs";
import { UpdateGenerationHistoryArgs } from "./UpdateGenerationHistoryArgs";
import { DeleteGenerationHistoryArgs } from "./DeleteGenerationHistoryArgs";
import { GenerationHistoryService } from "../generationHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GenerationHistory)
export class GenerationHistoryResolverBase {
  constructor(
    protected readonly service: GenerationHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "read",
    possession: "any",
  })
  async _generationHistoriesMeta(
    @graphql.Args() args: GenerationHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GenerationHistory])
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "read",
    possession: "any",
  })
  async generationHistories(
    @graphql.Args() args: GenerationHistoryFindManyArgs
  ): Promise<GenerationHistory[]> {
    return this.service.generationHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GenerationHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "read",
    possession: "own",
  })
  async generationHistory(
    @graphql.Args() args: GenerationHistoryFindUniqueArgs
  ): Promise<GenerationHistory | null> {
    const result = await this.service.generationHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GenerationHistory)
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "create",
    possession: "any",
  })
  async createGenerationHistory(
    @graphql.Args() args: CreateGenerationHistoryArgs
  ): Promise<GenerationHistory> {
    return await this.service.createGenerationHistory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GenerationHistory)
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "update",
    possession: "any",
  })
  async updateGenerationHistory(
    @graphql.Args() args: UpdateGenerationHistoryArgs
  ): Promise<GenerationHistory | null> {
    try {
      return await this.service.updateGenerationHistory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GenerationHistory)
  @nestAccessControl.UseRoles({
    resource: "GenerationHistory",
    action: "delete",
    possession: "any",
  })
  async deleteGenerationHistory(
    @graphql.Args() args: DeleteGenerationHistoryArgs
  ): Promise<GenerationHistory | null> {
    try {
      return await this.service.deleteGenerationHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
