/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GenerationHistory as PrismaGenerationHistory,
} from "@prisma/client";

export class GenerationHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GenerationHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.generationHistory.count(args);
  }

  async generationHistories(
    args: Prisma.GenerationHistoryFindManyArgs
  ): Promise<PrismaGenerationHistory[]> {
    return this.prisma.generationHistory.findMany(args);
  }
  async generationHistory(
    args: Prisma.GenerationHistoryFindUniqueArgs
  ): Promise<PrismaGenerationHistory | null> {
    return this.prisma.generationHistory.findUnique(args);
  }
  async createGenerationHistory(
    args: Prisma.GenerationHistoryCreateArgs
  ): Promise<PrismaGenerationHistory> {
    return this.prisma.generationHistory.create(args);
  }
  async updateGenerationHistory(
    args: Prisma.GenerationHistoryUpdateArgs
  ): Promise<PrismaGenerationHistory> {
    return this.prisma.generationHistory.update(args);
  }
  async deleteGenerationHistory(
    args: Prisma.GenerationHistoryDeleteArgs
  ): Promise<PrismaGenerationHistory> {
    return this.prisma.generationHistory.delete(args);
  }
}
