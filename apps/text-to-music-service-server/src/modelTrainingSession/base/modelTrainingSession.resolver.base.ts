/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ModelTrainingSession } from "./ModelTrainingSession";
import { ModelTrainingSessionCountArgs } from "./ModelTrainingSessionCountArgs";
import { ModelTrainingSessionFindManyArgs } from "./ModelTrainingSessionFindManyArgs";
import { ModelTrainingSessionFindUniqueArgs } from "./ModelTrainingSessionFindUniqueArgs";
import { CreateModelTrainingSessionArgs } from "./CreateModelTrainingSessionArgs";
import { UpdateModelTrainingSessionArgs } from "./UpdateModelTrainingSessionArgs";
import { DeleteModelTrainingSessionArgs } from "./DeleteModelTrainingSessionArgs";
import { ModelTrainingSessionService } from "../modelTrainingSession.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ModelTrainingSession)
export class ModelTrainingSessionResolverBase {
  constructor(
    protected readonly service: ModelTrainingSessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ModelTrainingSession",
    action: "read",
    possession: "any",
  })
  async _modelTrainingSessionsMeta(
    @graphql.Args() args: ModelTrainingSessionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ModelTrainingSession])
  @nestAccessControl.UseRoles({
    resource: "ModelTrainingSession",
    action: "read",
    possession: "any",
  })
  async modelTrainingSessions(
    @graphql.Args() args: ModelTrainingSessionFindManyArgs
  ): Promise<ModelTrainingSession[]> {
    return this.service.modelTrainingSessions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ModelTrainingSession, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ModelTrainingSession",
    action: "read",
    possession: "own",
  })
  async modelTrainingSession(
    @graphql.Args() args: ModelTrainingSessionFindUniqueArgs
  ): Promise<ModelTrainingSession | null> {
    const result = await this.service.modelTrainingSession(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ModelTrainingSession)
  @nestAccessControl.UseRoles({
    resource: "ModelTrainingSession",
    action: "create",
    possession: "any",
  })
  async createModelTrainingSession(
    @graphql.Args() args: CreateModelTrainingSessionArgs
  ): Promise<ModelTrainingSession> {
    return await this.service.createModelTrainingSession({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ModelTrainingSession)
  @nestAccessControl.UseRoles({
    resource: "ModelTrainingSession",
    action: "update",
    possession: "any",
  })
  async updateModelTrainingSession(
    @graphql.Args() args: UpdateModelTrainingSessionArgs
  ): Promise<ModelTrainingSession | null> {
    try {
      return await this.service.updateModelTrainingSession({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ModelTrainingSession)
  @nestAccessControl.UseRoles({
    resource: "ModelTrainingSession",
    action: "delete",
    possession: "any",
  })
  async deleteModelTrainingSession(
    @graphql.Args() args: DeleteModelTrainingSessionArgs
  ): Promise<ModelTrainingSession | null> {
    try {
      return await this.service.deleteModelTrainingSession(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
