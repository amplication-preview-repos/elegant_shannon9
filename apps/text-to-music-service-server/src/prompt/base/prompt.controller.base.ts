/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PromptService } from "../prompt.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PromptCreateInput } from "./PromptCreateInput";
import { Prompt } from "./Prompt";
import { PromptFindManyArgs } from "./PromptFindManyArgs";
import { PromptWhereUniqueInput } from "./PromptWhereUniqueInput";
import { PromptUpdateInput } from "./PromptUpdateInput";
import { MusicTrackFindManyArgs } from "../../musicTrack/base/MusicTrackFindManyArgs";
import { MusicTrack } from "../../musicTrack/base/MusicTrack";
import { MusicTrackWhereUniqueInput } from "../../musicTrack/base/MusicTrackWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PromptControllerBase {
  constructor(
    protected readonly service: PromptService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Prompt })
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPrompt(@common.Body() data: PromptCreateInput): Promise<Prompt> {
    return await this.service.createPrompt({
      data: {
        ...data,

        appUser: data.appUser
          ? {
              connect: data.appUser,
            }
          : undefined,
      },
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Prompt] })
  @ApiNestedQuery(PromptFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async prompts(@common.Req() request: Request): Promise<Prompt[]> {
    const args = plainToClass(PromptFindManyArgs, request.query);
    return this.service.prompts({
      ...args,
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Prompt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async prompt(
    @common.Param() params: PromptWhereUniqueInput
  ): Promise<Prompt | null> {
    const result = await this.service.prompt({
      where: params,
      select: {
        appUser: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Prompt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePrompt(
    @common.Param() params: PromptWhereUniqueInput,
    @common.Body() data: PromptUpdateInput
  ): Promise<Prompt | null> {
    try {
      return await this.service.updatePrompt({
        where: params,
        data: {
          ...data,

          appUser: data.appUser
            ? {
                connect: data.appUser,
              }
            : undefined,
        },
        select: {
          appUser: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Prompt })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePrompt(
    @common.Param() params: PromptWhereUniqueInput
  ): Promise<Prompt | null> {
    try {
      return await this.service.deletePrompt({
        where: params,
        select: {
          appUser: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/musicTracks")
  @ApiNestedQuery(MusicTrackFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MusicTrack",
    action: "read",
    possession: "any",
  })
  async findMusicTracks(
    @common.Req() request: Request,
    @common.Param() params: PromptWhereUniqueInput
  ): Promise<MusicTrack[]> {
    const query = plainToClass(MusicTrackFindManyArgs, request.query);
    const results = await this.service.findMusicTracks(params.id, {
      ...query,
      select: {
        createdAt: true,
        fileUrl: true,
        id: true,

        prompt: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/musicTracks")
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "update",
    possession: "any",
  })
  async connectMusicTracks(
    @common.Param() params: PromptWhereUniqueInput,
    @common.Body() body: MusicTrackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicTracks: {
        connect: body,
      },
    };
    await this.service.updatePrompt({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/musicTracks")
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "update",
    possession: "any",
  })
  async updateMusicTracks(
    @common.Param() params: PromptWhereUniqueInput,
    @common.Body() body: MusicTrackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicTracks: {
        set: body,
      },
    };
    await this.service.updatePrompt({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/musicTracks")
  @nestAccessControl.UseRoles({
    resource: "Prompt",
    action: "update",
    possession: "any",
  })
  async disconnectMusicTracks(
    @common.Param() params: PromptWhereUniqueInput,
    @common.Body() body: MusicTrackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      musicTracks: {
        disconnect: body,
      },
    };
    await this.service.updatePrompt({
      where: params,
      data,
      select: { id: true },
    });
  }
}
