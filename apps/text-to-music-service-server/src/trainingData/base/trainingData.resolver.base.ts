/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TrainingData } from "./TrainingData";
import { TrainingDataCountArgs } from "./TrainingDataCountArgs";
import { TrainingDataFindManyArgs } from "./TrainingDataFindManyArgs";
import { TrainingDataFindUniqueArgs } from "./TrainingDataFindUniqueArgs";
import { CreateTrainingDataArgs } from "./CreateTrainingDataArgs";
import { UpdateTrainingDataArgs } from "./UpdateTrainingDataArgs";
import { DeleteTrainingDataArgs } from "./DeleteTrainingDataArgs";
import { AppUser } from "../../appUser/base/AppUser";
import { TrainingDataService } from "../trainingData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TrainingData)
export class TrainingDataResolverBase {
  constructor(
    protected readonly service: TrainingDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TrainingData",
    action: "read",
    possession: "any",
  })
  async _trainingDataItemsMeta(
    @graphql.Args() args: TrainingDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TrainingData])
  @nestAccessControl.UseRoles({
    resource: "TrainingData",
    action: "read",
    possession: "any",
  })
  async trainingDataItems(
    @graphql.Args() args: TrainingDataFindManyArgs
  ): Promise<TrainingData[]> {
    return this.service.trainingDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TrainingData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TrainingData",
    action: "read",
    possession: "own",
  })
  async trainingData(
    @graphql.Args() args: TrainingDataFindUniqueArgs
  ): Promise<TrainingData | null> {
    const result = await this.service.trainingData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrainingData)
  @nestAccessControl.UseRoles({
    resource: "TrainingData",
    action: "create",
    possession: "any",
  })
  async createTrainingData(
    @graphql.Args() args: CreateTrainingDataArgs
  ): Promise<TrainingData> {
    return await this.service.createTrainingData({
      ...args,
      data: {
        ...args.data,

        appUser: args.data.appUser
          ? {
              connect: args.data.appUser,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TrainingData)
  @nestAccessControl.UseRoles({
    resource: "TrainingData",
    action: "update",
    possession: "any",
  })
  async updateTrainingData(
    @graphql.Args() args: UpdateTrainingDataArgs
  ): Promise<TrainingData | null> {
    try {
      return await this.service.updateTrainingData({
        ...args,
        data: {
          ...args.data,

          appUser: args.data.appUser
            ? {
                connect: args.data.appUser,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrainingData)
  @nestAccessControl.UseRoles({
    resource: "TrainingData",
    action: "delete",
    possession: "any",
  })
  async deleteTrainingData(
    @graphql.Args() args: DeleteTrainingDataArgs
  ): Promise<TrainingData | null> {
    try {
      return await this.service.deleteTrainingData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AppUser, {
    nullable: true,
    name: "appUser",
  })
  @nestAccessControl.UseRoles({
    resource: "AppUser",
    action: "read",
    possession: "any",
  })
  async getAppUser(
    @graphql.Parent() parent: TrainingData
  ): Promise<AppUser | null> {
    const result = await this.service.getAppUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
